// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	orders "practice-golang/service-order/sqlc"

	mock "github.com/stretchr/testify/mock"
)

// StoreMock is an autogenerated mock type for the StoreMock type
type StoreMock struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, arg
func (_m *StoreMock) CreateOrder(ctx context.Context, arg orders.CreateOrderParams) (orders.Order, error) {
	ret := _m.Called(ctx, arg)

	var r0 orders.Order
	if rf, ok := ret.Get(0).(func(context.Context, orders.CreateOrderParams) orders.Order); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(orders.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, orders.CreateOrderParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, id
func (_m *StoreMock) GetOrder(ctx context.Context, id int32) (orders.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 orders.Order
	if rf, ok := ret.Get(0).(func(context.Context, int32) orders.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(orders.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, arg
func (_m *StoreMock) UpdateOrder(ctx context.Context, arg orders.UpdateOrderParams) (orders.Order, error) {
	ret := _m.Called(ctx, arg)

	var r0 orders.Order
	if rf, ok := ret.Get(0).(func(context.Context, orders.UpdateOrderParams) orders.Order); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(orders.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, orders.UpdateOrderParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStoreMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewStoreMock creates a new instance of StoreMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStoreMock(t mockConstructorTestingTNewStoreMock) *StoreMock {
	mock := &StoreMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
